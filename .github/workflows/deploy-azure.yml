name: Automated Azure Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_setup:
        description: 'Force Azure infrastructure setup'
        required: false
        default: false
        type: boolean

env:
  RESOURCE_GROUP: rg-reframe-prod
  LOCATION: eastus
  IMAGE_NAME: reframe
  CONTAINER_NAME: reframe-api
  SERVICE_PRINCIPAL_NAME: sp-reframe-cicd

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Format check
      run: cargo fmt -- --check
    
    - name: Clippy check
      run: cargo clippy -- -D warnings
    
    - name: Run tests
      run: cargo test

  build-web-ui:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'web-ui/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd web-ui
        npm ci
    
    - name: Build web UI
      run: |
        cd web-ui
        npm run build
    
    - name: Prepare static files
      run: |
        mkdir -p static
        cp -r web-ui/build/* static/
    
    - name: Upload static files artifact
      uses: actions/upload-artifact@v4
      with:
        name: static-files
        path: static/
        retention-days: 1

  setup-azure-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      registry-name: ${{ steps.setup.outputs.registry-name }}
      setup-required: ${{ steps.check.outputs.setup-required }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Check if infrastructure setup is required
      id: check
      run: |
        # Check if resource group exists
        if az group show --name ${{ env.RESOURCE_GROUP }} &> /dev/null; then
          echo "Resource group exists"
          
          # Check if ACR exists
          REGISTRY_COUNT=$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query "length(@)" --output tsv)
          if [ "$REGISTRY_COUNT" -gt 0 ]; then
            echo "setup-required=false" >> $GITHUB_OUTPUT
            echo "Infrastructure already exists"
          else
            echo "setup-required=true" >> $GITHUB_OUTPUT
            echo "ACR not found, setup required"
          fi
        else
          echo "setup-required=true" >> $GITHUB_OUTPUT
          echo "Resource group not found, setup required"
        fi
        
        # Force setup if requested
        if [ "${{ github.event.inputs.force_setup }}" == "true" ]; then
          echo "setup-required=true" >> $GITHUB_OUTPUT
          echo "Force setup requested"
        fi
    
    - name: Register Azure Resource Providers
      if: steps.check.outputs.setup-required == 'true'
      run: |
        echo "🔧 Registering Azure Resource Providers..."
        
        PROVIDERS=(
          "Microsoft.ContainerInstance"
          "Microsoft.ContainerRegistry"
          "Microsoft.Network"
          "Microsoft.Resources"
        )
        
        for PROVIDER in "${PROVIDERS[@]}"; do
          echo "Checking: $PROVIDER"
          PROVIDER_STATE=$(az provider show --namespace "$PROVIDER" --query "registrationState" --output tsv 2>/dev/null || echo "NotRegistered")
          
          if [ "$PROVIDER_STATE" != "Registered" ]; then
            echo "🔄 Registering $PROVIDER..."
            az provider register --namespace "$PROVIDER"
            
            # Wait for registration with timeout
            TIMEOUT=300  # 5 minutes
            ELAPSED=0
            while [ "$(az provider show --namespace "$PROVIDER" --query 'registrationState' --output tsv 2>/dev/null || echo 'NotRegistered')" != "Registered" ] && [ $ELAPSED -lt $TIMEOUT ]; do
              echo "  Waiting for $PROVIDER registration... (${ELAPSED}s)"
              sleep 15
              ELAPSED=$((ELAPSED + 15))
            done
            
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "⚠️ Warning: $PROVIDER registration timed out, but continuing..."
            else
              echo "✅ $PROVIDER registered successfully"
            fi
          else
            echo "✅ $PROVIDER already registered"
          fi
        done
    
    - name: Create Resource Group
      if: steps.check.outputs.setup-required == 'true'
      run: |
        echo "🏗️ Creating resource group: ${{ env.RESOURCE_GROUP }}"
        az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
    
    - name: Deploy Azure Infrastructure
      id: setup
      if: steps.check.outputs.setup-required == 'true'
      run: |
        echo "🚀 Deploying Azure infrastructure..."
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file infrastructure/azure-setup.bicep \
          --parameters environment=prod deployContainer=false
        
        # Get registry name
        REGISTRY_NAME=$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" --output tsv)
        echo "registry-name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
        
        # Enable admin user
        az acr update --name $REGISTRY_NAME --admin-enabled true
        
        echo "✅ Infrastructure setup completed"
        echo "📦 Registry: $REGISTRY_NAME.azurecr.io"
    
    - name: Get existing registry name
      if: steps.check.outputs.setup-required == 'false'
      run: |
        REGISTRY_NAME=$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" --output tsv)
        echo "registry-name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
        echo "📦 Using existing registry: $REGISTRY_NAME.azurecr.io"

  build-and-push:
    needs: [test, build-web-ui, setup-azure-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      registry-name: ${{ needs.setup-azure-infrastructure.outputs.registry-name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download static files
      uses: actions/download-artifact@v4
      with:
        name: static-files
        path: static/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get ACR credentials
      id: acr-creds
      run: |
        REGISTRY_NAME="${{ needs.setup-azure-infrastructure.outputs.registry-name }}"
        ACR_USERNAME=$(az acr credential show --name $REGISTRY_NAME --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $REGISTRY_NAME --query passwords[0].value --output tsv)
        echo "::add-mask::$ACR_PASSWORD"
        echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
    
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ needs.setup-azure-infrastructure.outputs.registry-name }}.azurecr.io
        username: ${{ steps.acr-creds.outputs.username }}
        password: ${{ steps.acr-creds.outputs.password }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ needs.setup-azure-infrastructure.outputs.registry-name }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Extract short SHA
      id: sha
      run: echo "short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
    
    - name: Get ACR credentials
      id: acr-creds
      run: |
        REGISTRY_NAME="${{ needs.build-and-push.outputs.registry-name }}"
        ACR_USERNAME=$(az acr credential show --name $REGISTRY_NAME --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $REGISTRY_NAME --query passwords[0].value --output tsv)
        echo "::add-mask::$ACR_PASSWORD"
        echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
    
    - name: Deploy to Azure Container Instances (Staging)
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        dns-name-label: reframe-api-staging-${{ steps.sha.outputs.short }}
        image: ${{ needs.build-and-push.outputs.registry-name }}.azurecr.io/${{ env.IMAGE_NAME }}:sha-${{ steps.sha.outputs.short }}
        name: ${{ env.CONTAINER_NAME }}-staging
        location: ${{ env.LOCATION }}
        cpu: 0.5
        memory: 1
        ports: '3000'
        protocol: TCP
        environment-variables: |
          RUST_LOG=info
          PORT=3000
        registry-login-server: ${{ needs.build-and-push.outputs.registry-name }}.azurecr.io
        registry-username: ${{ steps.acr-creds.outputs.username }}
        registry-password: ${{ steps.acr-creds.outputs.password }}
    
    - name: Test staging deployment
      run: |
        # Wait for container to be ready
        sleep 30
        
        # Get the FQDN
        FQDN=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-staging \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "🧪 Testing staging deployment at: http://${FQDN}:3000"
        
        # Test the health endpoint
        curl -f "http://${FQDN}:3000/health" || echo "Health check endpoint not available"
        
        # Test the main API endpoint with sample data
        echo "Testing main API endpoint..."
        curl -X POST "http://${FQDN}:3000/reframe" \
          -H "Content-Type: text/plain" \
          -d "{1:F01BNPAFRPPXXX0000000000}{2:O1031234240101DEUTDEFFXXXX12345678952401011234N}{3:{103:EBA}}{4:
        :20:FT21001234567890
        :23B:CRED
        :32A:240101USD1000,00
        :50K:/1234567890
        ACME CORPORATION
        :52A:BNPAFRPPXXX
        :57A:DEUTDEFFXXX
        :59:/DE89370400440532013000
        MUELLER GMBH
        :70:PAYMENT FOR INVOICE 12345
        :71A:OUR
        -}" \
          --max-time 30 \
          -w "\nHTTP Status: %{http_code}\n" || echo "API test failed"

  deploy-production:
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    outputs:
      aci-fqdn: ${{ steps.get-fqdn.outputs.fqdn }}
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Extract short SHA
      id: sha
      run: echo "short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
    
    - name: Get ACR credentials
      id: acr-creds
      run: |
        REGISTRY_NAME="${{ needs.build-and-push.outputs.registry-name }}"
        ACR_USERNAME=$(az acr credential show --name $REGISTRY_NAME --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $REGISTRY_NAME --query passwords[0].value --output tsv)
        echo "::add-mask::$ACR_PASSWORD"
        echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
    
    - name: Deploy to Azure Container Instances (Production)
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        dns-name-label: reframe-api-prod
        image: ${{ needs.build-and-push.outputs.registry-name }}.azurecr.io/${{ env.IMAGE_NAME }}:sha-${{ steps.sha.outputs.short }}
        name: ${{ env.CONTAINER_NAME }}-prod
        location: ${{ env.LOCATION }}
        cpu: 1
        memory: 2
        ports: '3000'
        protocol: TCP
        environment-variables: |
          RUST_LOG=info
          PORT=3000
        registry-login-server: ${{ needs.build-and-push.outputs.registry-name }}.azurecr.io
        registry-username: ${{ steps.acr-creds.outputs.username }}
        registry-password: ${{ steps.acr-creds.outputs.password }}
    
    - name: Get production endpoint
      id: get-fqdn
      run: |
        FQDN=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-prod \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
        echo "🚀 Production ACI deployment successful!"
        echo "Web UI: http://${FQDN}:3000/"
        echo "API endpoint: http://${FQDN}:3000/reframe"
        echo "Health check: http://${FQDN}:3000/health"
    
    - name: Test production deployment
      run: |
        FQDN="${{ steps.get-fqdn.outputs.fqdn }}"
        
        # Wait for container to be ready
        sleep 30
        
        echo "🧪 Testing production deployment..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f "http://${FQDN}:3000/health" || echo "Health check failed"
        
        # Test web UI (check if index.html is served)
        echo "Testing web UI..."
        curl -f "http://${FQDN}:3000/" | grep -q "Reframe" || echo "Web UI test failed"
        
        # Test API endpoint
        echo "Testing API endpoint..."
        curl -X POST "http://${FQDN}:3000/reframe" \
          -H "Content-Type: text/plain" \
          -d "{1:F01BNPAFRPPXXX0000000000}{2:O1031234240101DEUTDEFFXXXX12345678952401011234N}{3:{103:EBA}}{4:
        :20:FT21001234567890
        :23B:CRED
        :32A:240101USD1000,00
        :50K:/1234567890
        ACME CORPORATION
        :52A:BNPAFRPPXXX
        :57A:DEUTDEFFXXX
        :59:/DE89370400440532013000
        MUELLER GMBH
        :70:PAYMENT FOR INVOICE 12345
        :71A:OUR
        -}" \
          --max-time 30 \
          -w "\nHTTP Status: %{http_code}\n" || echo "API test failed"
        
        echo ""
        echo "🎉 All tests completed!"
        echo "✅ Web UI: http://${FQDN}:3000/"
        echo "✅ API: http://${FQDN}:3000/reframe"

  cleanup-staging:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Cleanup staging environment
      run: |
        az container delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-staging \
          --yes || echo "Staging container not found or already deleted" 